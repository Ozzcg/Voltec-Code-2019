// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6647.Voltres.subsystems;

import org.usfirst.frc6647.Voltres.RobotMap;

import org.usfirst.frc6647.Voltres.Robot;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.ctre.phoenix.motorcontrol.ControlMode;

public class Robot_TilTake extends PIDSubsystem {

    private static int direction1 = 1;
    private static int direction2 = -1;
    private static double tilt_up_speed = .8;
    private static double tilt_down_speed = 0.6;
    private static WPI_VictorSPX tilTake;
    private static AnalogPotentiometer a_pot;
    public static double ret;


    public Robot_TilTake() {
        super("Robot_TilTake", RobotMap.intakeP, RobotMap.intakeI, RobotMap.intakeD);
        tilTake = RobotMap.tilTake;
        a_pot = RobotMap.tiltakePot;
        setInputRange(.920, 1);
        setOutputRange(-1, 1);
        setAbsoluteTolerance(.00005);
        getPIDController().setContinuous(true);

    }
    public void setPoint(int position){
        setSetpoint(position);
    }
    public void setPIDValues(){
        getPIDController().setPID(RobotMap.intakeP,RobotMap.intakeI, RobotMap.intakeD);
    }
    public double getRet(){
        return ret;
    }
    @Override
    public void initDefaultCommand() {
    }

    public void Tilt_Up(){
        //tilTake.set(ControlMode.PercentOutput, tilt_up_speed*direction1);
        tilTake.set(ControlMode.PercentOutput, Robot.oi.joystick2.getRawAxis(3)*direction1*0.8);
    }

    public void Tilt_Down(){
        //tilTake.set(ControlMode.PercentOutput, tilt_down_speed*direction2);
        tilTake.set(ControlMode.PercentOutput, Robot.oi.joystick2.getRawAxis(2)*direction2*0.6);
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("Pot Value", a_pot.get());
    }

    public void stop(){
        tilTake.set(ControlMode.PercentOutput, 0.0);
    }

    @Override
    protected double returnPIDInput() {
        ret = a_pot.pidGet() - .920;
        return ret;
    }

    @Override
    protected void usePIDOutput(double output) {
        tilTake.set(ControlMode.PercentOutput, output);

    }

}

