// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6647.Voltres;

import org.usfirst.frc6647.Voltres.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

//import org.usfirst.frc6647.Voltres.subsystems.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public Joystick joystick1;
	public Joystick joystick2;
	//public Joystick joystick3;

	public JoystickButton Button1;
	public JoystickButton Button2;
	public JoystickButton Button3;
	public JoystickButton Button4;
	public JoystickButton Button5;
	public JoystickButton Button6;
	public JoystickButton Button7;
	public JoystickButton Button8;
	/*
	public JoystickButton Button9;
	public JoystickButton Button10;
	public JoystickButton Button11;
	public JoystickButton Button12;
	*/
	public JoystickButton Button13;
	public JoystickButton Button14;

	public JoystickButton sButton1;
	public JoystickButton sButton2;
	public JoystickButton sButton3;
	public JoystickButton sButton4;
	public JoystickButton sButton5;
	public JoystickButton sButton6;
	public JoystickButton sButton7;
	public JoystickButton sButton8;
	public JoystickButton sButton9;
	public JoystickButton sButton10;
	public JoystickButton sButton11;
	public JoystickButton sButton12;
	public JoystickButton sButton13;
	public JoystickButton sButton14;

	/*
	public JoystickButton tButton1;
	public JoystickButton tButton2;
	public JoystickButton tButton3;
	public JoystickButton tButton4;
	public JoystickButton tButton5;
	public JoystickButton tButton6;
	public JoystickButton tButton7;
	public JoystickButton tButton8;
	*/

	public Button dPadUp;
	public Button dPadDown;

	public Button sdPadUp;
	public Button sdPadDown;
	public Button sdPadLeft;
	public Button sdPadRight;

	/*
	public Button dPadLeft;
	public Button dPadRight;

	public Button sdPadUp;
	public Button sdPadDown;
	public Button sdPadLeft;
	public Button sdPadRight;
	*/
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		joystick1 = new Joystick(0);
		joystick2 = new Joystick(1);
		//joystick3 = new Joystick(2);

		
		//SmartDashboard.putData("GyroAlign", new GyroAlign());
		//SmartDashboard.putData("VisionAlign", new VisionAlign());
		SmartDashboard.putData("ZeroYaw", new ZeroYaw());
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		dPadUp = buttonFromPOV(joystick1, 0);
		dPadDown = buttonFromPOV(joystick1, 180);


		sdPadDown = buttonFromPOV(joystick2, 180);
		sdPadUp = buttonFromPOV(joystick2, 0);
		sdPadLeft = buttonFromPOV(joystick2, 270);
		sdPadRight = buttonFromPOV(joystick2, 90);

		/*
		dPadLeft = buttonFromPOV(joystick1, 270);
		dPadRight = buttonFromPOV(joystick1, 90);
		*/

		/*

		sdPadUp = buttonFromPOV(joystick2, 0);
		sdPadDown = buttonFromPOV(joystick2, 180);
		sdPadLeft = buttonFromPOV(joystick2, 270);
		sdPadRight = buttonFromPOV(joystick2, 90);
		*/

		Button1 = new JoystickButton(joystick1, 1);
		Button2 = new JoystickButton(joystick1, 2);
		Button3 = new JoystickButton(joystick1, 3);
		Button4 = new JoystickButton(joystick1, 4);
		Button5 = new JoystickButton(joystick1, 5);
		Button6 = new JoystickButton(joystick1, 6);
		Button7 = new JoystickButton(joystick1, 7);
		Button8 = new JoystickButton(joystick1, 8);
/*
		Button9 = new JoystickButton(joystick1, 9);
		Button10 = new JoystickButton(joystick1, 10);
		Button11 = new JoystickButton(joystick1, 11);
		Button12 = new JoystickButton(joystick1, 12);
		*/
		Button13 = new JoystickButton(joystick1, 13);
		Button14 = new JoystickButton(joystick1, 14);

		sButton1 = new JoystickButton(joystick2, 1);
		sButton2 = new JoystickButton(joystick2, 2);
		sButton3 = new JoystickButton(joystick2, 3);
		sButton4 = new JoystickButton(joystick2, 4);
		sButton5 = new JoystickButton(joystick2, 5);
		sButton6 = new JoystickButton(joystick2, 6);
		sButton7 = new JoystickButton(joystick2, 7);
		sButton8 = new JoystickButton(joystick2, 8);

		sButton9 = new JoystickButton(joystick2, 9);
		sButton10 = new JoystickButton(joystick2, 10);
		sButton11 = new JoystickButton(joystick2, 11);
		sButton12 = new JoystickButton(joystick2, 12);
		sButton13 = new JoystickButton(joystick2, 13);
		sButton14 = new JoystickButton(joystick2, 14);

		////////////////// HAB CONTROL///////////


		/*
		tButton1 = new JoystickButton(joystick3, 1);
		tButton2 = new JoystickButton(joystick3, 2);
		tButton3 = new JoystickButton(joystick3, 3);
		tButton4 = new JoystickButton(joystick3, 4);
		tButton5 = new JoystickButton(joystick3, 5);
		tButton6 = new JoystickButton(joystick3, 6);
		tButton7 = new JoystickButton(joystick3, 7);
		tButton8 = new JoystickButton(joystick3, 8);
*/

		// SmartDashboard.putNumber("Degrees", joystick1.getDirectionDegrees());

		// mACHE CONFIG
		// Button4.whenPressed(new VisionAlignment());


		////////INTAKE FUNCTIONS MACHE/////////

		Button5.whileHeld(new BallIn());			//LB - Recoger Pelota
		Button6.whileHeld(new BallOut());			//RB - Escupir Pelota

		Button2.toggleWhenPressed(new LatchH());	//equis - extraer/retraer ventosas
		Button3.toggleWhenPressed(new PushHatch());		//circulo - latch de hatch

		///////H WHEELS FUNCTIONS MACHE///////

		Button7.whileHeld(new Slide(true));			//LT - H Drive hacia la izquierda
		Button8.whileHeld(new Slide(false));		//RT - H Drive Hacia la derecha

		//////DRIVE TRAIN FUNCTIONS MACHE/////

		Button4.whileHeld(new LimiterMaxSpeed());	//triangulo - ///STICKS - Velocidad alta/// ------ ///DPAD - No cuerva, vel alta///
		Button1.whileHeld(new LimiterSlowSpeed());	//cuadrado - ///STICKS - Velocidad baja/// ------ ///DPAD - CURVA, vel baja -> alta, USAR PARA ACERCARSE///

		dPadUp.whileHeld(new GyroAlign());
		dPadDown.whileHeld(new GyroAlign());	//DPAD Down - Se acomoda al angulo mas cercano, se mueve hacia atras dependiendo de la velocidad

		Button14.whileHeld(new GyroAlign());	//TouchPAD - Se acomoda al angulo mas cercano


		/*
		dPadLeft.whenPressed(new AlignNext(true));
		dPadRight.whenPressed(new AlignNext(false));
		*/
	
		// Button14.whileHeld(new VisionAlign());


		/*
		 * Button6.whileHeld(new LiftUpManual()); Button5.whileHeld(new
		 * LiftDownManual()); Button1.whileHeld(new HAB3()); Button14.whileHeld(new
		 * Reset_Encoders()); Button13.whileHeld(new MoveBackHAB());
		 */

		// sButton1.whileHeld(new TilTake());

		// sButton4.whenPressed(new LatchH());

		///////// PARA COMPETENCIA LOGITECH////////
		/*
		sButton1.whileHeld(new HatchLow());
		sButton3.whileHeld(new HatchMid());
		sButton2.whileHeld(new GetBallFloor());
		sButton4.whileHeld(new BallMid());
		sButton6.whileHeld(new HatchHigh());
		sButton5.whileHeld(new LiftDownManual());
		*/

		///////////PARA COMPETENCIA PS4/////////////

		sButton2.whileHeld(new BallLow());				//equis - hatch 1er nivel (1-feeding, 1-rocket, cargo)
		sButton1.whileHeld(new BallCargo());				//cuadrado - 
		sButton3.whileHeld(new GetBallFloor());			//circulo - Recoger pelota del piso
		sButton4.whileHeld(new BallMid());				//triangulo
		sButton6.whileHeld(new BallHigh());			//RB - Lift Arriba (3er Hatch)
		sButton5.whileHeld(new LiftDownManual());		//LB - Lift Abajo Manual

		sButton7.whileHeld(new TilTakeDownManual());
		sButton8.whileHeld(new TilTakeUpManual());

		sButton9.whenPressed(new HBWD());				//Share - Retraer H
		sButton10.whenPressed(new HFWD());				//Options - Adelantar H

		sButton13.whileHeld(new Reset_Encoders());		//PS Button - Reset Encoders

		sButton14.whileHeld(new LowerHatch());


		sdPadDown.whileHeld(new HatchLow());
		sdPadLeft.whileHeld(new HatchMid());
		sdPadRight.whileHeld(new HatchMid());
		sdPadUp.whileHeld(new HatchHigh());


		/////////////IDEA DE CONTROLES/////////////

		/*
		sButton2.whileHeld(new HatchLow());
		sButton1.whileHeld(new HatchMid());
		sButton4.whileHeld(new HatchHigh());
		sButton5.whileHeld(new LiftDownManual());
		sButton6.whileHeld(new HatchHigh());

		sButton3.whileHeld(new GetBallFloor());

		sdPadLeft.whileHeld(new BallMid());
		sdPadRight.whileHeld(new BallMid());
		sdPadDown.whileHeld(new BallLow());
		sdPadUp.whileHeld(new BallHigh());

		sButton13.whileHeld(new Reset_Encoders());
		*/
		

		//////// COMPETENCIA TERCER CONTROL/////////

		/*

		tButton1.whileHeld(new FHABClimb());
		tButton2.whileHeld(new FHABLetSlide());	//dejar caer

		tButton3.whileHeld(new RHABClimb());
		tButton4.whileHeld(new RHABLetSlide());		//dejar caer

		tButton5.whileHeld(new FHABHold());		//mantener adelante
		tButton6.whileHeld(new RHABHold());		//mantener atras

		tButton7.whileHeld(new RETFront());		//regresar wea de enfrente
		tButton8.whileHeld(new RETBack());		//regresar wea de atras

		*/

		/*
		 * sButton2.whileHeld(new HatchLow()); sButton3.whileHeld(new HatchMid());
		 * sButton4.whileHeld(new HatchHigh());
		 */

		/*
		 * sButton5.whenPressed(new BCFWD()); sButton6.whenPressed(new FCFWD());
		 * sButton7.whenPressed(new BCBWD()); sButton8.whenPressed(new FCBWD());
		 * sButton1.whileHeld(new TilTake());
		 */

		/*
		 * sButton4.whenPressed(new BCFWD()); sButton2.whenPressed(new FCFWD());
		 * sButton3.whenPressed(new BCBWD()); sButton1.whenPressed(new FCBWD());
		 */

		/*
		 * sButton5.whenPressed(new HABMoveBack()); sButton6.whenPressed(new
		 * HABMoveFront());
		 */

	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

	

	private Button buttonFromPOV(GenericHID controller) {
		return new Button() {
			@Override
			public boolean get() {
				return (controller.getPOV()) > -1;
			}
		};
	}

	public Button buttonFromPOV(GenericHID controller, int angle) {
		return new Button() {
			@Override
			public boolean get() {
				return (controller.getPOV()) == angle;
			}
		};
	}
}