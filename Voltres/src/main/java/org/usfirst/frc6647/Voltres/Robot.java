// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6647.Voltres;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc6647.Voltres.commands.AlignTape;
import org.usfirst.frc6647.Voltres.commands.HatchHigh;
import org.usfirst.frc6647.Voltres.commands.HatchLow;
import org.usfirst.frc6647.Voltres.commands.HatchMid;
import org.usfirst.frc6647.Voltres.commands.TimedVision;
import org.usfirst.frc6647.Voltres.commands.VisionAlign;
import org.usfirst.frc6647.Voltres.subsystems.*;
import org.usfirst.frc6647.Voltres.subsystems.vision.Vision;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

	Command autonomousCommand;
	Command drivestart_command;
	Command resetall_command;

	SendableChooser<Command> chooser = new SendableChooser<>();

	public static OI oi;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Robot_Intake intake;
	public static Robot_Lift lift;
	public static Robot_TilTake tilTake;
	public static Robot_Drive robotDrive;
	public static Robot_Control control;
	public static Autonomous_Commands autonomouscommands;
	public static Robot_DriveWithPID driveWPID;
	public static Vision vision;

	public static HatchLow hatchLow;
	public static HatchMid hatchMid;
	public static HatchHigh hatchHigh;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		RobotMap.init();

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		intake = new Robot_Intake();
		lift = new Robot_Lift();
		tilTake = new Robot_TilTake();
		robotDrive = new Robot_Drive();
		control = new Robot_Control();
		driveWPID = new Robot_DriveWithPID();
		vision = new Vision();
		autonomouscommands = new Autonomous_Commands();

		hatchLow = new HatchLow();
		hatchMid = new HatchMid();
		hatchHigh = new HatchHigh();
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// Add commands to Autonomous Sendable Chooser
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		SmartDashboard.putData("Auto mode", chooser);

		//Robot.control.turnCompressorOff(); //Activa el ciclo automatico de can del
		// compresor
	}

	@Override
	public void robotPeriodic() {
		

	}

	/**
	 * This function is called when the disabled button is hit. You can use it to
	 * reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void autonomousInit() {
		/*
		 * autonomousCommand = chooser.getSelected(); // schedule the autonomous command
		 * (example) if (autonomousCommand != null) autonomousCommand.start();
		 */
/*
		AlignTape tapeCommand = new AlignTape();
		autonomousCommand = tapeCommand;
*/
		VisionAlign visionAlign = new VisionAlign();
		autonomousCommand = visionAlign;

		autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		vision.testPixy1();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		RobotMap.liftP = SmartDashboard.getNumber("Kp", RobotMap.liftP);
		RobotMap.liftI = SmartDashboard.getNumber("Ki", RobotMap.liftI);
		RobotMap.liftD = SmartDashboard.getNumber("Kd", RobotMap.liftD);
		driveWPID.Main_Drive();

	}
}
